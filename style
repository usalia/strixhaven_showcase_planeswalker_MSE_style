mse version: 2.0.0
game: magic
short name: JP Showcase Walkers
full name: Strixhaven Showcase Planeswalker
icon: card-sample.png
position hint: 095

version: 2021-06-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2007-09-23

card width: 375
card height: 523
card dpi: 150
####### card images from silverback_ape
####### pt image from Card Conjurer
#### https://cardconjurer.com/
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	include file: blends
	
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.grey_hybrid_name }

	#walki boi
	mainframe_walker := {true}
	text_filter := text_filter + {apply_margins(input, name:margin_code)} + {add_spacers(input, name:margin_code)}
	
	#Should multicolor lands with basic land types have a colored name?
	mask_multi_land_with_color := { styling.colored_multicolor_land_name }
	
	template_prefix := [card: "" card2:"back/" name1:"name/" name2:"name/" name3:"name/" type1:"type/" type2:"type/" type3:"type/" pt: "" stamp: "" identity: "/magic-identity-new.mse-include/"]
	template_suffix := [card: "card.png" card2:"card.png" crown:"crown.png" name1:"cap.png" name2:"name.png" name3:"cap.png" type1:"cap.png" type2:"type.png" type3:"cap.png" pt: "pt.png" stamp: "stamp.jpg" identity: "identity.png"]
	template      := { template_prefix[type] + input + template_suffix[type] }
	land_template := { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	c1_hybrid := [
		radial: [
			0: { template("c")       }
			1: { template(colors[0]) }
			2: { template(colors[0]) }
			3: { template(colors[0]) }
			4: { template(colors[0]) }
			5: { template(colors[0]) }
			6: { template(colors[0]) }
			7: { template(colors[0]) }
		]
		vertical: [
			1: { template(colors[0]) }
			2: { template(colors[0]) }
			3: { template(colors[0]) }
			4: { template(colors[0]) }
			5: { template(colors[0]) }
			6: { template(colors[0]) }
			7: { template(colors[0]) }
		]
		horizontal: [
			1: { template(colors[0]) }
			2: { template(colors[0]) }
			3: { template(colors[0]) }
			4: { template(colors[0]) }
			5: { template(colors[0]) }
			6: { template(colors[0]) }
			7: { template(colors[0]) }
		]
		overlay: overlay_hybrid
	]
	c2_hybrid := [
		radial: [
			0: { template("c")       }
			1: { template(colors[0]) }
			2: { template(colors[1]) }
			3: { template(colors[1]) }
			4: { template(colors[1]) }
			5: { template(colors[1]) }
			6: { template(colors[1]) }
			7: { template(colors[1]) }
		]
		vertical:  [
			1: { template(colors[0]) }
			2: { template(colors[1]) }
			3: { template(colors[1]) }
			4: { template(colors[1]) }
			5: { template(colors[1]) }
			6: { template(colors[1]) }
			7: { template(colors[1]) }
		]
		horizontal: [
			1: { template(colors[0]) }
			2: { template(colors[1]) }
			3: { template(colors[1]) }
			4: { template(colors[1]) }
			5: { template(colors[1]) }
			6: { template(colors[1]) }
			7: { template(colors[1]) }
		]
		overlay: overlay_hybrid
	]
	### i have no idea why card_hybrid isn't working or why i need both of these'
	slide_hybrid := [
		radial: [
			0: { template("c")       }
			1: { template(colors[0]) }
			2: { linear_blend(
				image1: template(colors[0])
				image2: template(colors[1])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			3: { template(colors[2]) }
			4: { linear_blend(
				image1: template(colors[3])
				image2: template(colors[2])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			5: { template(colors[3]) }
			6: { linear_blend(
				image1: template(colors[4])
				image2: template(colors[3])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			7: { template(colors[4]) }
		]
		vertical: horizontal_stamp_hybrid
		horizontal: [
			1: { template(colors[0]) }
			2: { linear_blend(
					image1: template(colors[0])
					image2: template(colors[1])
					x1: 0,  y1: 0
					x2: 0,  y2: 0.85
				) 
			}
			3: { template(colors[2]) }
			4: { template(colors[3]) }
			5: { template(colors[4]) }
			6: { template(colors[5]) }
			7: { template(colors[6]) }
		]
		overlay: overlay_hybrid
	]
	slide_hybrid2 := [
		radial: [
			0: { template("c")       }
			1: { template(colors[0]) }
			2: { linear_blend(
				image1: template(colors[0])
				image2: template(colors[1])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			3: { template(colors[2]) }
			4: { linear_blend(
				image1: template(colors[3])
				image2: template(colors[2])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			5: { template(colors[3]) }
			6: { linear_blend(
				image1: template(colors[4])
				image2: template(colors[3])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			7: { template(colors[4]) }
		]
		vertical: horizontal_stamp_hybrid
		horizontal: [
			1: { template(colors[0]) }
			2: { linear_blend(
					image1: template(colors[0])
					image2: template(colors[1])
					x1: 0,  y1: 0
					x2: 0.85,  y2: 0
				) 
			}
			3: { template(colors[2]) }
			4: { template(colors[3]) }
			5: { template(colors[4]) }
			6: { template(colors[5]) }
			7: { template(colors[6]) }
		]
		overlay: overlay_hybrid
	]

	card_background := { color_background(type:"card",     base_hybrid:stamp_hybrid) }
	name1_background := { color_background(type:"name1",     base_hybrid:c1_hybrid) }
	name2_background := { color_background(type:"name2",     base_hybrid:slide_hybrid) }
	name3_background := { color_background(type:"name3",     base_hybrid:c2_hybrid) }
	type1_background := { color_background(type:"type1",     base_hybrid:c1_hybrid) }
	type2_background := { color_background(type:"type2",     base_hybrid:slide_hybrid2) }
	type3_background := { color_background(type:"type3",     base_hybrid:c2_hybrid) }
	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	
	# miku edits

	special_text := {
		out := (if card.loyalty_cost_1 != "" then "[" + card.loyalty_cost_1 + "]: " else "") + (if card.level_1_text != "" and card.level_1_text != card.rule_text then card.level_1_text+"\n" else split_text(match:"\n", card.rule_text).0+"\n")
			+ (if card.loyalty_cost_2 != "" then "[" + card.loyalty_cost_2 + "]" + ": " else "") + (if card.level_2_text != "" then card.level_2_text+"\n" else if contains(paragraph_count(card.rule_text), match:"~") then split_text(match:"\n", card.rule_text).1+"\n" else "")
			+ (if card.loyalty_cost_3 != "" then "[" + card.loyalty_cost_3 + "]" + ": " else "") + (if card.level_3_text != "" then card.level_3_text+"\n" else if contains(paragraph_count(card.rule_text), match:"~~") then split_text(match:"\n", card.rule_text).2+"\n" else "")
			+ (if card.loyalty_cost_4 != "" then "[" + card.loyalty_cost_4 + "]" + ": " else "") + (if card.level_4_text != "" then card.level_4_text+"\n" else if contains(paragraph_count(card.rule_text), match:"~~~") then split_text(match:"\n", card.rule_text).3+"\n" else "")
			+ (if card.loyalty_cost_5 != "" then "[" + card.loyalty_cost_5 + "]" + ": " else "") + (if card.level_5_text != "" then card.level_5_text+"\n" else if contains(paragraph_count(card.rule_text), match:"~~~~") then split_text(match:"\n", card.rule_text).4+"\n" else "")
			+ (if card.loyalty_cost_6 != "" then "[" + card.loyalty_cost_6 + "]" + ": " else "") + (if card.level_6_text != "" then card.level_6_text+"\n" else if contains(paragraph_count(card.rule_text), match:"~~~~~") then split_text(match:"\n", card.rule_text).5 else "")
		out := replace(out, match:"\n\n+", replace:"")
		out
	}
	pw_font_size := { if styling.font_size != "" then styling.font_size else 12 }

	stripe01 := {if length(card_style.text.layout.separators) or else 0 > 0 then card_style.text.top + card_style.text.layout.separators[0] + stripe_adj(top:0, bot:1) else 0}
	stripe12 := {if length(card_style.text.layout.separators) or else 0 > 1 then card_style.text.top + card_style.text.layout.separators[1] + stripe_adj(top:0, bot:1) else 0}
	stripe23 := {if length(card_style.text.layout.separators) or else 0 > 2 then card_style.text.top + card_style.text.layout.separators[2] + stripe_adj(top:0, bot:1) else 0}
	stripe34 := {if length(card_style.text.layout.separators) or else 0 > 3 then card_style.text.top + card_style.text.layout.separators[3] + stripe_adj(top:0, bot:1) else 0}
	stripe45 := {if length(card_style.text.layout.separators) or else 0 > 4 then card_style.text.top + card_style.text.layout.separators[4] + stripe_adj(top:0, bot:1) else 0}
	stripe_adj := {-4}


	abil_center := { if card_style.text.layout.blocks[input].bottom or else 0 > 0 then
		card_style.text.top + card_style.text.layout.blocks[input].middle + overlap_check(input)
	else -30	
	}

	is_clear := { true }

	global_chop_top := { to_int(pull_comma_array(styling.combined_chop, cell:0, end:0, default:0))}
	global_chop_bot := { to_int(pull_comma_array(styling.combined_chop, cell:1, end:0, default:0))}
	global_chop_right := { to_int(pull_comma_array(styling.combined_chop, cell:3, end:0, default:0))}
	top_of_textbox := {if has_four_abilities() then 292+global_chop_top()+(if is_clear() then 5 else 0) else 329+global_chop_top()}
	#use_full_art := { contains(styling.other_options, match:"mythic edition fullart") }
	mask_script := {
		if contains(styling.custom_mask, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_mask
		else if use_full_art() then "fortress_imagemask.png"
		else ""
	}

	overlap_check := {
		if input == 0
			then 0
		else if card_style.text.layout.blocks[input].middle == card_style.text.layout.blocks[input-1].middle
			then 40*(input-1)
		else 0
	}

	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }
	
	# Loyalty cost arrows
	loyalty_image := {
		if      contains(input, match: "+") then "loyalty up"
		else if contains(input, match: "-") then "loyalty down"
		else                                     "loyalty naught"
	}

	# Does the card have four abilities?
	# has_four_abilities := { max_level() > 3 or force_tall()}
	has_four_abilities := { false }
	has_two_abilities := { max_level() < 3 }
	is_stamped := { is_rare() and styling.use_holofoil_stamps }
	is_normal_size := { styling.default_image_size }
	loyal_move := { pull_comma_array(styling.shift_loyalty_costs, cell:0, end:0, default:0)}
	loyal_move2 := { if card.level_2_text == "" or card.level_2_text == "​" then -15 else pull_comma_array(styling.shift_loyalty_costs, cell:1, end:0, default:0)}
	loyal_move3 := { if card.level_3_text == "" or card.level_3_text == "​" then -5 else pull_comma_array(styling.shift_loyalty_costs, cell:2, end:0, default:0)}
	loyal_move4 := { pull_comma_array(styling.shift_loyalty_costs, cell:3, end:0, default:0)}
	loyal_move5 := { pull_comma_array(styling.shift_loyalty_costs, cell:4, end:0, default:0)}
	loyal_move6 := { pull_comma_array(styling.shift_loyalty_costs, cell:5, end:0, default:0)}

	# Other Options
	#force_tall := { contains(styling.other_options, match:"use taller frame")}

	max_level_function := [
		"auto": {
			if card.level_6_text != "" and card.level_6_text != "​" then 6
			else if card.level_5_text != "" and card.level_5_text != "​" then 5
			else if card.level_4_text != "" and card.level_4_text != "​" then 4
			else if card.level_3_text != "" and card.level_3_text != "​" then 3
			else 2
		},
		"one": {1},
		"two": {2},
		"three": {3},
		"four": {4},
		"five": {5},
		"six": {6},
	]

	max_level := {max_level_function[force_level()]()}

	mainframe_walker_text_script := {
		if max_level() == 1 or (max_level() == 2 and card.level_2_text == "") or force_level() == "two" then 
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
		else if max_level() == 2 or force_level() == "three" then 
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
		else if max_level() == 3 or force_level() == "four" then 
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
		else if max_level() == 4 or force_level() == "five" then 
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
		else if max_level() > 4 or force_level() == "six" then 
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
		else
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
	}

	margin_left := { 130 }

	#margin_left := {
	#	if input == "lv1" then (if card.loyalty_cost_1 == "" and unindent() then 0 else 130)
	#	else if input == "lv2" then (if card.loyalty_cost_2 == "" and unindent() then 0 else 130)
	#	else if input == "lv3" then (if card.loyalty_cost_3 == "" and unindent() then 0 else 130)
	#	else if input == "lv4" then (if card.loyalty_cost_4 == "" and unindent() then 0 else 130)
	#	else if input == "lv5" then (if card.loyalty_cost_5 == "" and unindent() then 0 else 130)
	#	else if input == "lv6" then (if card.loyalty_cost_6 == "" and unindent() then 0 else 130)
	#	else 0
	#}

	#unindent := { contains(styling.other_options, match:"un-indent nonloyalty abilities")}
	
	margin_top := {to_int(pull_comma_array(styling.combined_chop, cell:2, end:0, default:0))}
	add_spacers := { if input == "" and inner_level(name) then "​" else input}
	
	inner_level := {
		if input == "lv5" and max_level() > 5 then true
		else if input == "lv4" and max_level() > 4 then true
		else if input == "lv3" and max_level() > 3 then true
		else if input == "lv2" and max_level() > 2 then true
		else if input == "lv1" and max_level() > 1 then true
		else false
	}

	force_level := {
		if styling.override_levels == "one ability" then "one"
		else if styling.override_levels == "two abilities" then "two"
		else if styling.override_levels == "three abilities" then "three"
		else if styling.override_levels == "four abilities" then "four"
		else if styling.override_levels == "five abilities" then "five"
		else if styling.override_levels == "six abilities" then "six"
		else "auto"
	}

	card_shape := {"planeswalker"}

	# Is the card a promo card?
	is_promo := { styling.promo }
	is_legend := {set.auto_legends and contains(card.super_type, match:"Legendary") }
	mana_sort := {
		if styling.unsorted_casting_cost then
			input
		else
			sort_text@(order: "XYZI[0123456789]HSCA(WUBRG)")()
	}
	ancestral_mana := { styling.ancestral_mana_symbols }
	has_identity := { styling.color_indicator_dot }
	is_unsorted := {styling.remove_from_autocount}

	chop_top := {to_number(pull_comma_array(styling.text_chops, cell:0, end:false))}
	chop_bot := {to_number(pull_comma_array(styling.text_chops, cell:1, end:false))}
	chop_correction := { chop_bot() }
	shrink_type := {if styling.shrink_typeline_text != "" then to_number(styling.shrink_typeline_text) else 0}
	shrink_name := {if styling.shrink_name_text != "" then to_number(styling.shrink_name_text) else 0}
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png")}
	un_png := replace@(match:".png", replace: "")
	jp_name_length := {card_style.name.content_height * length(card.name)}
	shown_cr := {if set.automatic_copyright then set.copyright != "" else card.copyright != ""}
	use_vorthos := {true}
############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)
############################################################## Extra style options
styling field:
	type: text
	name: font size
	description: Use to overwrite the font size. Default is size 12.
styling field:
	type: choice
	name: override levels
	choice: automatic
	choice: one ability
	choice: two abilities
	choice: three abilities
	choice: four abilities
	choice: five abilities
	choice: six abilities
	description: Automatically apply layers, force four abilities, or force one ability
styling field:
	type: text
	name: shift loyalty costs
	description: Moves loyalty costs up the specified amount. Use negative to move down. Formatted as "1,2,3,4,"
styling field:
	type: text
	name: combined chop
	description: Formatted "X,Y,Z", shrinks the top X pixels, shrinks bottom Y pixels toward center, widens small stripes Z pixels.
styling field:
	type: choice
	name: language
	choice: English
	choice: Japanese
styling field:
	type: text
	name: text chops
	description: Format as "X,Y". Shrinks textbox X pixels from the top and Y from bottom.
styling field:
	type: text
	name: shrink name text
	description: Shrinks name X pixels
styling field:
	type: text
	name: shrink typeline text
	description: Shrinks type X pixels
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: boolean
	name: use holofoil stamps
	description: Change to no to disable rare holofoil stamps
styling field:
	type: boolean
	name: color indicator dot
	description: Use the color indicator dot
	initial: no
styling field:
	type: boolean
	name: remove from autocount
	description: Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial: no
styling field:
	type: boolean
	name: grey hybrid name
	description: Use a grey background for the name and type line on hybrid cards. This is done on real cards.
styling field:
	type: boolean
	name: unsorted casting cost
	description: Disables automatic mana symbol sorting.
	initial: no
styling field:
	type: boolean
	name: ancestral mana symbols
	description: Enables ancestral's modified generic mana.
	initial: no
	#'
styling field:
	type: boolean
	name: colored multicolor land name
	description: Use a colored background for the name and type on multicolor land cards with a basic land type. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: choice
	name: center text
	description: When to center text (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: boolean
	name: promo
	description: Is this card a promo card, with the "P" rarity?
	initial: no
styling field:
	type: boolean
	name: masterpiece
	description: Is this card a Masterpiece?
	initial: no
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling style:
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
############################################################## Card fields
card style:
	############################# Background stuff
	card color:
		left:	0
		top:	0
		width:	375
		height:	523
		z index: 0
		render style: image
		popup style: in place
		image: { card_background() }
		mask: frame_mask.png
	############################# Name line
	name:
		left: 48
		top: {if styling.language == "Japanese" then 550 else 42}
		width:  {max(37, card_style.name.content_width+10)}
		height: 22
		alignment: top shrink-overflow
		padding bottom: 0
		z index: 2
		font:
			name: Beleren Bold
			size: {13 - shrink_name()}
			color: white
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	casting cost:
		right: 346
		top: 29
		width: { max(30, card_style.casting_cost.content_width) + 5 }
		height: 23
		alignment: middle right
		font:
			name: MPlantin
			size: 15
		symbol font:
			name: magic-mana-small-strixhaven-jp
			size: 15
			alignment: middle right
		always symbol: true
		z index: 2
		padding top: 0
	############################# Image
	image:
		left: 0
		top: 0
		width: 375
		height:	486
		z index: -1
		default: {default_image(card.card_color)}
		mask: image_mask.png
	mainframe image:
		left: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).0 else "0"}
		top: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).1 else "0"}
		width: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).2 else "0"}
		height: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).3 else "0"}
		z index: 8

	############################# Card type
	indicator:
		left: 28
		top: 301
		width: 17
		height: 17
		z index: 1
		render style: image
		visible: { has_identity() }
		image: { card_identity() }
	type:
		left: 32
		top: {shrink_type() + 292 }
		width: { max(105, card_style.type.content_width) }
		height: { 19 - shrink_type() }
		alignment: top center shrink-overflow
		z index: 2
		padding top: 2
		font:
			name: Beleren Bold
			size: {12 - shrink_type()}
			color: black
			separator color: red
	rarity:
		right: 344
		top: 298
		width: 44
		height: 22
		z index: 2
		render style: image
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	text:
		left: 48
		top: { top_of_textbox() }
		width: {300 - global_chop_right()}
		bottom: {477-global_chop_bot()-(if is_stamped() then 2 else 0)}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.font_size != "" then styling.font_size else if has_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.font_size != "" then styling.font_size else if has_four_abilities() then 13.8 else 14 }
		alignment:
			script:
				if (styling.center_text == "short text only" and
					not contains(match:"\n", card.rule_text) and
					card.flavor_text == "<i-flavor></i-flavor>" and
					card_style.text.content_lines <= 2) or
					styling.center_text == "always"
				then "middle center"
				else "middle left"
		mask: {"walker_text_mask.png"}
		z index: 6
		padding left:   6
		padding right:  4
		padding top: 4
		line height hard: 1.2
		line height line: 1.3
		line height soft: { if has_four_abilities() then 0.85 else 0.9 }
		line height hard max: 1.4
		line height line max: 2.2
	watermark:
		left: 19
		top : { if has_four_abilities() then 314 else 331 }
		width: 334
		height: 150
		z index: 4
		render style: image
		popup style: in place
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks
	############################# Loyalty
	loyalty:
		z index: 7
		left: 328
		top: 466
		width: 13.16
		height:	34.63
		alignment: center middle
		font:
			name: Beleren Bold
			size: 14
			color: white
	loyalty cost 1:
		z index: 7
		left: 28
		top: { abil_center(0) - 17.3 - 2 - loyal_move() }
		width: 18
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 2:
		z index: 7
		left: 28
		top: { abil_center(1) - 17.3 - 2 - loyal_move2() }
		width: 18
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 3:
		z index: 7
		left: 28
		top: { abil_center(2) - 17.3 - 2 - loyal_move3() }
		width: {if card.loyalty_cost_3 != "" or max_level() > 1 then 18 else 0}
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 4:
		z index: 7
		left: 28
		top: { abil_center(3) - 17.3 - 2 - loyal_move4() }
		width: {if card.loyalty_cost_4 != "" or max_level() > 2 then 18 else 0}
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 5:
		z index: 7
		left: 28
		top: { abil_center(4) - 17.3 - 2 - loyal_move5() }
		width: {if card.loyalty_cost_5 != "" or max_level() > 3 then 18 else 0}
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 6:
		z index: 7
		left: 28
		top: { abil_center(5) - 17.3 - 2 - loyal_move6() }
		width: {if card.loyalty_cost_6 != "" or max_level() > 4 then 18 else 0}
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	############################# PT
	pt:
		z index: 2
		left: 292
		top: 467
		width: 60
		height:	28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: 15
			color: black
			separator color: red
	############################# Card sorting / numbering
	set code:
		left: 24
		top: 498
		width: 40
		height: 10
		z index: 1
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	############################# Copyright stuff
	illustrator:
		left: { 44 + card_style.set_code.content_width }
		top: 497.5
		width: 200
		height: 10
		z index: 1
		font:
			name: Beleren Small Caps Bold
			size: 7.25
			color: white
	copyright:
		right: 350
		top: 502.5
		width: 140
		height: 10
		z index: 2
		visible: {not set.automatic_copyright}
		alignment: middle right shrink-overflow
		font:
			name: Matrix
			size: 7
			color: white
			weight: bold
############################################################## Extra card fields
extra card field:
	type: text
	name: filler text
	editable: true
	save value: true
	show statistics: false
	multi line: true
	script:
		forward_editor(field: card.special_text)
		special_text()
extra card field:
	type: text
	name: card code
	save value: false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount then
			forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else
			combined_editor(field1: card.custom_card_number, separator: " " + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type: choice
	name: artist arrow
	editable: false
	save value: false
	choice: white
extra card field:
	type: choice
	name: pt box
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: name bar 1
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: name bar 2
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: name bar 3
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: type bar 1
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: type bar 2
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: type bar 3
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: foil stamp
	choice: stamp
	save value: false
	editable: false
extra card field:
	type: choice
	name: foil layer
	choice: foil
	save value: false
	editable: false
extra card field:
	type: choice
	name: stamp
	script: card.card_color
	show statistics: false
extra card field:
	type: text
	name: auto copyright
	script: set.copyright
	save value: false
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: flavor bar
	choice: bar
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: text
	name: jp name
	script: forward_editor(field: card.name)
#loyalty
extra card field:
	type: text
	name: colon 1
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 2
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 3
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 4
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 5
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 6
	editable: false
	script: ":"
	save value: false

extra card field:
	type: choice
	name: bottom first
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: top third
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: bottom third
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: top fifth
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: bottom fifth
	editable: false
	save value: false
	choice: stripe

extra card field:
	type: color
	name: top color
	script: rgb(230,230,230)
	editable: false
	save value: false
extra card field:
	type: color
	name: bottom color
	script: rgb(230,230,230)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color
	script: rgb(230,230,230)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color 2
	script: rgb(230,230,230)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color 3
	script: rgb(230,230,230)
	editable: false
	save value: false

extra card field:
	type: choice
	name: loyalty box
	editable: false
	choice: loyalty
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 1
	editable: false
	script: loyalty_image(card.loyalty_cost_1)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 2
	editable: false
	script: loyalty_image(card.loyalty_cost_2)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 3
	editable: false
	script: loyalty_image(card.loyalty_cost_3)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 4
	editable: false
	script: loyalty_image(card.loyalty_cost_4)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 5
	editable: false
	script: loyalty_image(card.loyalty_cost_5)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 6
	editable: false
	script: loyalty_image(card.loyalty_cost_6)
	save value: false

extra card style:
	card code:
		left: 24
		top: 488
		width: 120
		height: 10
		z index: 1
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	artist arrow:
		left: { 28 + card_style.set_code.content_width }
		top: 500
		width: 12
		height: 7
		z index: 1
		render style: image
		image: artist_arrow.png
	pt box:
		left: 288
		top: 464
		width: 67
		height:	32
		z index: 1
		visible: { card.pt != "" }
		render style: image
		image: pt.png
	name bar 1:
		left: 28
		top: {if styling.language == "Japanese" then 24 else 80}
		width: 56
		height:	22
		z index: 1
		render style: image
		image: {name1_background()}
		angle: {if styling.language == "Japanese" then 0 else 90}
	name bar 2:
		left: {if styling.language == "Japanese" then 28 else 50}
		top: {if styling.language == "Japanese" then 46 else 80}
		width: 56
		height:	{if styling.language == "Japanese" then max(34, jp_name_length()-20) else card_style.name.content_width}
		z index: 1
		render style: image
		image: {name2_background()}
		angle: {if styling.language == "Japanese" then 0 else 90}
	name bar 3:
		left: {if styling.language == "Japanese" then 28 else 50+card_style.name.content_width-3.4}
		top: {if styling.language == "Japanese" then 46 + max(34, jp_name_length()-20)-0.5 else 80}
		width: 56
		height:	22
		z index: 1
		render style: image
		image: {flip_vertical(name3_background())}
		angle: {if styling.language == "Japanese" then 0 else 90}
	type bar 1:
		left: 22
		top: 289
		width: 15
		height:	30
		z index: 1
		render style: image
		image: {type1_background()}
	type bar 2:
		left: 37
		top: 289
		width: {max(96, card_style.type.content_width)}
		height:	30
		z index: 1
		render style: image
		image: {type2_background()}
	type bar 3:
		left: {37+max(96, card_style.type.content_width)-0.4}
		top: 289
		width: 15
		height:	30
		z index: 1
		render style: image
		image: {flip_horizontal(type3_background())}
	foil layer:
		left: 0
		top : 0
		width: 375
		height: 523
		z index: 3
		render style: image
		image: {if styling.overlay == "" then nil else styling.overlay + "/overlay.png"}
		mask: { if is_rare() then "foil_mask_rare.png" else "foil_mask.png" }
	stamp:
		left: 165
		top: 472
		width: 46
		height: 26
		z index: 1
		visible: { is_rare() and styling.use_holofoil_stamps }
		render style: image
		image: stamp.png
	foil stamp:
		left: 165
		top: 472
		width: 46
		height: 26
		z index: 2
		visible: { is_rare() and styling.use_holofoil_stamps }
		render style: image
		image: foil_stamp.png
	auto copyright:
		right: 350
		top: 502.5
		width: 140
		height: 10
		z index: 2
		alignment: middle right shrink-overflow
		visible: {set.automatic_copyright}
		font:
			name: Matrix
			size: 7
			color: white
			weight: bold
	flavor bar:
		left: 0
		top: { bar_equation() }
		width: 375
		height: 1
		z index: 1
		render style: image
		image: bar.png
		visible: { card.rule_text != "" and remove_tags(card.flavor_text) != "" and set.use_flavor_bar }
	jp name:
		left: 37
		top: 40
		width:  {if styling.language == "Japanese" then 37 else 0}
		height: {max(50, jp_name_length())}
		direction: vertical
		alignment: top center shrink-overflow
		padding bottom: 0
		z index: 2
		font:
			name: Beleren Bold
			size: {13 - shrink_name()}
			color: white
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	vorthos box:
		right: { if card.pt != "" then 275 else 350 }
		top: {if card.pt == "" and shown_cr() then 502 else 488}
		width: { 70 }
		height: {if use_vorthos() then 10 else 0}
		z index: 3
		alignment: middle right
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
			###Block of first textbox
	loyalty box:
		right: 364
		top: 464
		width: 60
		height: 38
		z index: 6
		render style: image
		visible: { card.loyalty != "" }
		choice images:
			loyalty: loyalty.png
	loyalty cost box 1:
		left: 15
		top: { abil_center(0) - 17.3 - 2 - loyal_move() }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_1 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 2:
		left: 15
		top: { abil_center(1) - 17.3 - 2 - loyal_move2() }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_2 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 3:
		left: 15
		top: { abil_center(2) - 17.3 - 2 - loyal_move3() }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_3 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 4:
		left: 15
		top: { abil_center(3) - 17.3 - 2 - loyal_move4() }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_4 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 5:
		left: 15
		top: { abil_center(4) - 17.3 - 2 - loyal_move5() }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_5 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 6:
		left: 15
		top: { abil_center(5) - 17.3 - 2 - loyal_move6() }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_6 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	colon 1:
		left: 59
		top: { abil_center(0) - 17.3 + 10 - loyal_move() }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_1 != "" }
	colon 2:
		left: 59
		top: { abil_center(1) - 17.3 + 10 - loyal_move2() }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_2 != "" }
	colon 3:
		left: 59
		top: { abil_center(2) - 17.3 + 10 - loyal_move3() }
		width: {if has_two_abilities() then 0 else 5}
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_3 != "" }
	colon 4:
		left: 59
		top: { abil_center(3) - 17.3 + 10 - loyal_move4() }
		#width: { if has_four_abilities() then 5 else 0 }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_4 != "" }
	colon 5:
		left: 59
		top: { abil_center(4) - 17.3 + 10 - loyal_move5() }
		#width: { if has_four_abilities() then 5 else 0 }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_5 != "" }
	colon 6:
		left: 59
		top: { abil_center(5) - 17.3 + 10 - loyal_move6() }
		#width: { if has_four_abilities() then 5 else 0 }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_6 != "" }

	# stripe blocks #
	top color:
		left: 32
		#top: {if is_clear() and max_level() > 4 then 288 else if has_four_abilities() then 288 else if is_clear() then 322 else 324 }
		top: 325
		width: 310
		#height: { if is_clear() and max_level() > 4 then 19 else 21 }
		height: 18
		z index: 2
		mask: stripe_mask.png

	stripe color:
		left: 32
		top: { (if has_four_abilities() then 309 else if is_clear() then 343 else 345) }
		width: 310
		bottom: { max(if force_level() == "one" then 465 else to_int(stripe01()-1), (if has_four_abilities() then 309 else 345)) }
		z index: 2
		mask: stripe_mask.png

	stripe color 2:
		left: 32
		top: { to_int(stripe12()+10) }
		width: 310
		bottom: { if max_level() == 3 then 465 else to_int(min(465, stripe23()-3)) }
		z index: 2
		mask: stripe_mask.png
		visible: { card.level_3_text != ""}

	stripe color 3:
		left: 32
		top: { to_int(stripe34()+10) }
		width: 310
		bottom: { if max_level() == 5 then 465 else to_int(min(465, stripe45()-2)) }
		z index: 2
		mask: stripe_mask.png
		visible: { max_level() > 4 and to_int(stripe34()+10) <= 465 }

	bottom color:
		left: 32
		top: 465
		width: 310
		height: 13
		z index: 2
		mask: stripe_mask.png
		visible: { force_level() == "one" or max_level() == 3 or max_level() == 5}
	
	# stripe bot and tops #

	bottom first:
		left: 32
		top: { max(to_int(stripe01()-3)+(if is_clear() then 2 else 0), (if has_four_abilities() then 309 else 345)-(if is_clear() then 2 else 0)) }
		width: 310
		height: 20
		image: _top_stripe.png
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { force_level() != "one" }

	bottom third:
		left: 32
		top: {to_int(min(465, stripe23()-3)) }
		width: 310
		height: 20
		image: _top_stripe.png
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { max_level() > 3}

	bottom fifth:
		left: 32
		top: {to_int(min(465, stripe45()-2)) }
		width: 310
		height: 20
		image: _top_stripe.png
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { max_level() == 6}

	top third:
		left: 32
		top: {to_int(stripe12()-3) }
		width: 310
		height: 13
		image: _bot_stripe.png
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { card.level_3_text != ""}

	top fifth:
		left: 32
		top: {to_int(stripe34()-3)}
		width: 310
		height: 13
		image: _bot_stripe.png
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { max_level() > 4}